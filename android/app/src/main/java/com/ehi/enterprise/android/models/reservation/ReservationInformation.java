package com.ehi.enterprise.android.models.reservation;

import com.ehi.enterprise.android.models.EHIModel;
import com.ehi.enterprise.android.models.location.solr.EHISolrLocation;
import com.ehi.enterprise.android.utils.TimeUtils;
import com.google.gson.annotations.SerializedName;

import java.util.Date;

public class ReservationInformation extends EHIModel {

    @SerializedName("pickup_location")
    private EHISolrLocation mPickupLocation;

    @SerializedName("return_location")
    private EHISolrLocation mReturnLocation;

    @SerializedName("pickup_date")
    private Date mPickupDate;

    @SerializedName("return_date")
    private Date mReturnDate;

    @SerializedName("pickup_time")
    private Date mPickupTime;

    @SerializedName("return_time")
    private Date mReturnTime;

    @SerializedName("corp_account")
    private EHIContract mCorpAccount;

    @SerializedName("renter_age")
    private int mRenterAge;

    public ReservationInformation(EHISolrLocation pickupLocation,
                                  EHISolrLocation returnLocation,
                                  Date pickupDate,
                                  Date returnDate,
                                  Date pickupTime,
                                  Date returnTime,
                                  EHIContract corpAccount,
                                  int renterAge) {
        mPickupLocation = pickupLocation;
        mReturnLocation = returnLocation;
        mPickupDate = pickupDate;
        mReturnDate = returnDate;
        mCorpAccount = corpAccount;
        mReturnTime = returnTime;
        mPickupTime = pickupTime;
        mRenterAge = renterAge;
    }

    public ReservationInformation() {
    }

    public void setPickupLocation(EHISolrLocation pickupLocation) {
        mPickupLocation = pickupLocation;
    }

    public void setReturnLocation(EHISolrLocation returnLocation) {
        mReturnLocation = returnLocation;
    }

    public EHISolrLocation getPickupLocation() {
        return mPickupLocation;
    }

    public EHISolrLocation getReturnLocation() {
        return mReturnLocation;
    }

    public Date getPickupDate() {
        return mPickupDate;
    }

    public Date getPickupTime() {
        return mPickupTime;
    }

    public Date getReturnTime() {
        return mReturnTime;
    }

    public int getRenterAge() {
        return mRenterAge;
    }

    public void setPickupDate(Date pickupDate) {
        mPickupDate = pickupDate;
    }

    public void setReturnDate(Date returnDate) {
        mReturnDate = returnDate;
    }

    public void setPickupTime(Date pickupTime) {
        mPickupTime = pickupTime;
    }

    public void setReturnTime(Date returnTime) {
        mReturnTime = returnTime;
    }

    public Date getReturnDate() {
        return mReturnDate;
    }

    public void setRenterAge(int renterAge) {
        mRenterAge = renterAge;
    }

    public EHIContract getCorpAccount() {
        return mCorpAccount;
    }

    public void setCorpAccount(EHIContract corpAccount) {
        mCorpAccount = corpAccount;
    }

    //TODO this method shouldn't generated by IDEA, check the implementation before change
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ReservationInformation)) return false;

        ReservationInformation that = (ReservationInformation) o;

        if (mRenterAge != that.mRenterAge) return false;

        if (mPickupLocation != null && that.mPickupLocation != null) {
            if (!mPickupLocation.getPeopleSoftId().equalsIgnoreCase(that.mPickupLocation.getPeopleSoftId())) {
                return false;
            }
        }

        if ((mPickupLocation != null && that.mPickupLocation == null)
                || (mPickupLocation == null && that.mPickupLocation != null)) {
            return false;
        }

        if (mReturnLocation != null && that.mReturnLocation != null) {
            if (!mReturnLocation.getPeopleSoftId().equalsIgnoreCase(that.mReturnLocation.getPeopleSoftId())) {
                return false;
            }
        }

        if ((mReturnLocation != null && that.mReturnLocation == null)
                || (mReturnLocation == null && that.mReturnLocation != null)) {
            return false;
        }

        if (mPickupDate != null ? !mPickupDate.equals(that.mPickupDate) : that.mPickupDate != null)
            return false;
        if (mReturnDate != null ? !mReturnDate.equals(that.mReturnDate) : that.mReturnDate != null)
            return false;
        if (mPickupTime != null ? !mPickupTime.equals(that.mPickupTime) : that.mPickupTime != null)
            return false;
        if (mReturnTime != null ? !mReturnTime.equals(that.mReturnTime) : that.mReturnTime != null)
            return false;

        if (mCorpAccount != null
                && mCorpAccount.getContractNumber() != null
                && that.mCorpAccount != null
                && that.mCorpAccount.getContractNumber() != null) {
            if (!mCorpAccount.getContractNumber().equalsIgnoreCase(that.mCorpAccount.getContractNumber())) {
                return false;
            }
        }

        if ((mCorpAccount != null && that.mCorpAccount == null)
                || (mCorpAccount == null && that.mCorpAccount != null)) {
            return false;
        }

        return true;

    }

    @Override
    public int hashCode() {
        int result = mPickupLocation != null ? mPickupLocation.hashCode() : 0;
        result = 31 * result + (mReturnLocation != null ? mReturnLocation.hashCode() : 0);
        result = 31 * result + (mPickupDate != null ? mPickupDate.hashCode() : 0);
        result = 31 * result + (mReturnDate != null ? mReturnDate.hashCode() : 0);
        result = 31 * result + (mPickupTime != null ? mPickupTime.hashCode() : 0);
        result = 31 * result + (mReturnTime != null ? mReturnTime.hashCode() : 0);
        result = 31 * result + (mCorpAccount != null ? mCorpAccount.hashCode() : 0);
        result = 31 * result + mRenterAge;
        return result;
    }

    public static ReservationInformation fromReservationObject(EHIReservation rawValue) {
        ReservationInformation info = new ReservationInformation();
        if (rawValue.getPickupLocation() != null) {
            info.setPickupLocation(EHISolrLocation.fromLocation(rawValue.getPickupLocation()));
        }
        if (rawValue.getReturnLocation() != null
                && rawValue.isOneWayRental()) {
            info.setReturnLocation(EHISolrLocation.fromLocation(rawValue.getReturnLocation()));
        }

        Date[] pickupDateAndTime = TimeUtils.splitDateAndTime(rawValue.getPickupTime());
        info.setPickupDate(pickupDateAndTime[0]);
        info.setPickupTime(pickupDateAndTime[1]);

        Date[] returnDateAndTime = TimeUtils.splitDateAndTime(rawValue.getReturnTime());

        info.setReturnDate(returnDateAndTime[0]);
        info.setReturnTime(returnDateAndTime[1]);

        info.setCorpAccount(rawValue.getCorporateAccount());

        info.setRenterAge(rawValue.getRenterAge().intValue());

        return info;
    }
}